openapi: 3.0.0
servers:
  - url: 'https://connect.yourcompany.com/'
info:
  description: OAuth2 APIs
  version: 1.0.0
  title: OAuth2
tags:
  - name: OAuth2
    description: The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.
paths:
  /authorize:
    get:
      tags:
        - OAuth2    
      summary: Obtain an authorization grant
      description: >
        The authorization endpoint is used to interact with the resource owner and obtain an authorization grant.  The authorization server MUST first verify the identity of the resource owner.

        Example:


        ```

        GET
        https://connect.yourcompany.com/authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1 Host: server.example.com


        ```


        This endpoint also supports the POST method, in which case the parameters are passed as a form post.


        See also:
          - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)
      operationId: authorize
      parameters:
        - name: response_type
          in: query
          description: >
            The value MUST be one of "code" for requesting an authorization code, "token" for requesting an access token (implicit grant), or a registered extension value. If an authorization request is missing the "response_type" parameter, or if the response type is not understood, the authorization server MUST return an error response 
          required: true
          schema:
            type: string
            enum:
            - "code"
            - "token"            
        - name: client_id
          in: query
          description: >
            A client ID obtained from the
            [Dashboard](https://dashboard.yourcompany.com/).
          required: true
          schema:
            type: string            
        - name: scope
          in: query
          description: >
            A space-separated list of the permissions your application is requesting.
          required: false
          schema:
            type: string
        - name: redirect_uri
          in: query
          description: >
            After completing its interaction with the resource owner, the authorization server directs the resource owner's user-agent back to  the client.  The authorization server redirects the user-agent to the client's redirection endpoint previously established with the authorization server during the client registration process or when making the authorization request.
          required: false
          schema:
            type: string
        - name: state
          in: query
          description: >
            An opaque value used by the client to maintain state between the request and callback.  The authorization server includes this value when redirecting the user-agent back to the client.  The parameter SHOULD be used for preventing cross-site request forgery.
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Found
          headers:
            Location:
              description: The authorization server redirects the user-agent to the redirect_uri
              schema:
                type: string
        '405':
          description: Invalid input                
  /token:
    post:
      summary: Obtain an ID Token
      description: >
        Exchange en authorization code for an ID Token or Access Token.


        This endpoint supports both `client_secret_post` and
        `client_secret_basic` authenticatino methods, as specified by the
        client's `token_endpoint_auth_method`.


        See also:
          - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)
      tags:
        - OAuth2
      operationId: token
      parameters:
        - name: Authorization
          in: header
          description: |
            HTTP Basic authorization header.
          required: false
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Token'
        '400':
          $ref: '#/components/responses/OAuth2Error'
        '401':
          $ref: '#/components/responses/OAuth2Error'
      externalDocs:
        description: OpenID Token Endpoint
        url: 'http://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  description: |
                    The registered client ID.
                  type: string
                client_secret:
                  description: |
                    The registered client ID secret.
                  type: string
                  format: password
                grant_type:
                  description: |
                    The authorization grant type, must be `authorization_code`.
                  type: string
                code:
                  description: >
                    The authorization code previously obtained from the
                    Authentication endpoint.
                  type: string
                redirect_uri:
                  description: >
                    The redirect URL that was used previously with the
                    Authentication endpoint.
                  type: string
              required:
                - client_id
  /clients:
    get:
      summary: List clients
      tags:
        - Client Management
      description: |
        Retrieve a list of clients.
      operationId: client
      responses:
        '200':
          description: A list of Client Objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/x-www-form-urlencoded:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        default:
          $ref: '#/components/responses/OAuth2Error'
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []
    post:
      summary: Register a client
      tags:
        - Client Management
      description: >
        Register a new client with this YourCompany Connect provider.
        Before initiating the oauth protocol, the client MUST register with the authorization server.

        This endpoint is compatible with [OIDC's Client
        Registration](http://openid.net/specs/openid-connect-registration-1_0.html)
        extension.


        See also:

        - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)
      operationId: createClient
      parameters: []
      responses:
        '201':
          description: Client created
          headers:
            Location:
              description: URL of new client resource
              schema:
                type: string
        '405':
          description: Invalid input                
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []
      requestBody:
        $ref: '#/components/requestBodies/Client'
  '/client/{client_id}':
    get:
      summary: View a client
      tags:
        - Client Management
      description: >
        Retrieve the configuration of a previously registered client.


        See also:

        - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)
      operationId: getClient
      parameters:
        - $ref: '#/components/parameters/client_id'
      responses:
        '200':
          description: Client found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Client'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Client'
            text/html:
              schema:
                $ref: '#/components/schemas/Client'
        default:
          $ref: '#/components/responses/OAuth2Error'
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []
    put:
      summary: Update a client
      tags:
        - Client Management
      description: >
        Update the configuration of a previously registered client.


        See also:

        - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)
      operationId: updateClient
      parameters:
        - $ref: '#/components/parameters/client_id'
      responses:
        '200':
          description: Client updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/Client'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Client'
            text/html:
              schema:
                $ref: '#/components/schemas/Client'
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []
      requestBody:
        $ref: '#/components/requestBodies/Client'
    delete:
      summary: Delete a client
      tags:
        - Client Management
      description: |
        Delete a previously registered client.
      operationId: clientClient_id
      parameters:
        - $ref: '#/components/parameters/client_id'
      responses:
        '204':
          description: Client deleted
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []
  /providers:
    get:
      summary: List providers
      tags:
        - Provider Management
      description: |
        Retrieve a list of providers.
      operationId: client
      responses:
        '200':
          description: A list of Provider Objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/x-www-form-urlencoded:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
        default:
          $ref: '#/components/responses/OAuth2Error'
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []  
    delete:
      summary: Delete a provider
      tags:
        - Provider Management
      description: |
        Delete a SDK provider.
      operationId: clientClient_id
      parameters:
        - $ref: '#/components/parameters/client_id'
      responses:
        '204':
          description: Client deleted
      security:
        - client_registration_token: []
        - oauth_code: []
        - oauth_implicit: []        
externalDocs:
  description: <Your Company> Developer Docs
  url: 'https://developers.yourcompany.com/'
components:
  schemas:
    Token:
      description: |
        Successful token response
      required:
        - token_type
      properties:
        token_type:
          type: string
        access_token:
          description: The access token issued by the authorization server.
          type: string
        id_token:
          description: ID Token value associated with the authenticated session.
          type: string
        refresh_token:
          description: 'The refresh token issued to the client, if any.'
          type: string
        expires_in:
          description: The lifetime in seconds of the access token.
          type: integer
          format: int32
        expires_at:
          description: The time the access token will expire in seconds since epoch.
          type: integer
          format: int64
        scope:
          description: The scope of the granted tokens.
          type: string
    OAuth2Error:
      description: |
        Error Response defined as in Section 5.2 of OAuth 2.0 [RFC6749].
      required:
        - error
      properties:
        error:
          type: string
        error_description:
          type: string
    Client:
      description: Client object
      required:
        - client_name
        - client_uri
      properties:
        client_id:
          type: string
          description: The authorization server issues the registered client a client identifier -- a unique string representing the registration information provided by the client.  The client identifier is not a  secret; it is exposed to the resource owner and MUST NOT be used  alone for client authentication.  The client identifier is unique to the authorization server.
          readOnly: true
        client_secret:
          type: string
          description: The client secret.   
          readOnly: true           
        client_type:
          type: string
          description: OAuth defines two client types, based on their ability to authenticate securely with the authorization server (i.e., ability to maintain the confidentiality of their client credentials). The client type designation is based on the authorization server's definition of secure authentication and its acceptable exposure levels of client credentials.  The authorization server SHOULD NOT make assumptions about the client type.
          enum:
          - 'confidential'
          - 'public'          
        redirect_uris:
          type: array
          items:
            type: string
        response_types:
          type: array
          items:
            type: string
        grant_types:
          type: array
          items:
            type: string
        application_type:
          type: string
        contacts:
          type: array
          items:
            type: string
        client_name:
          type: string
        logo_uri:
          type: string
        client_uri:
          type: string
        policy_uri:
          type: string
        tos_uri:
          type: string
        default_max_age:
          type: integer
          format: int64
        default_scopes:
          type: array
          items:
            type: string
    Error:
      type: object
      required:
        - httpStatusCode
        - customCode
        - message
      properties:
        httpStatusCode:
          type: integer
          minimum: 100
          maximum: 599
          description: HTTP Status code for error
        customCode:
          type: string
          description: Application specific error code
        message:
          type: string
          description: Short message describing cause of error
        description:
          type: string
          description: Details error description
        errorHelpUrl:
          type: string
          description: >-
            URL to page containing rich error description and resolution
            examples
        moreInfo:
          type: string
          description: More details describing error            
  responses:
    Token:
      description: Token response
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Token'
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Token'
        text/html:
          schema:
            $ref: '#/components/schemas/Token'
    OAuth2Error:
      description: OAuth 2.0 error response
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/OAuth2Error'
        application/json:
          schema:
            $ref: '#/components/schemas/OAuth2Error'
        application/problem+json:
          schema:
            $ref: '#/components/schemas/OAuth2Error'
        text/html:
          schema:
            $ref: '#/components/schemas/OAuth2Error'
  parameters:
    client_id:
      name: client_id
      in: path
      description: Client identifier
      required: true
      schema:
        type: string
  examples: {}
  requestBodies:
    Client:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Client'
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/Client'
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Client'
      description: Client Object
  securitySchemes:
    client_secret:
      description: Session management by confidential clients.
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://connect.yourcompany.com/token'
          scopes:
            clients: Enable client management
    client_registration_token:
      description: Client management via registration token.
      type: apiKey
      name: Authorization
      in: header
    user_jwt:
      description: Session management by YourCompany ID.
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'https://connect.yourcompany.com/token'
          scopes:
            session: Enable session management
  headers: {}
